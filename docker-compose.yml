version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: spotify-dashboard-backend
    ports:
      - "8080:8080"  # map port 8080 to port 8080 in the container
    environment:
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
      - SPOTIFY_REDIRECT_URI=${SPOTIFY_REDIRECT_URI:-http://localhost:3000/callback}
    networks:
      - spotify-network
    healthcheck:
      # check if backend is ready
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/api/spotify/me"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s 

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: spotify-dashboard-frontend
    ports:
      - "3000:3000"  # port 3000 in the container
    environment:
      - NEXT_PUBLIC_SPOTIFY_CLIENT_ID=${NEXT_PUBLIC_SPOTIFY_CLIENT_ID}
      - NEXT_PUBLIC_SPOTIFY_REDIRECT_URI=${NEXT_PUBLIC_SPOTIFY_REDIRECT_URI:-http://localhost:3000/callback}
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL:-http://localhost:8080}
    depends_on:
      backend:
        condition: service_started  # don't start frontend til backend is up
    networks:
      - spotify-network

  redis:
    image: redis:7-alpine
    container_name: spotify-dashboard-redis
    ports:
      - "6379:6379"
    networks:
      - spotify-network
    command: redis-server --appendonly yes  # enable data persistence
    volumes:
      - redis-data:/data

# private network for all our containers to communicate
networks:
  spotify-network:
    driver: bridge

# create place to store Redis data permanently
volumes:
  redis-data:

